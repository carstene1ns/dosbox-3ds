#---------------------------------------------------------------------------------
.SUFFIXES:
#---------------------------------------------------------------------------------

ifeq ($(strip $(DEVKITARM)),)
$(error "Please set DEVKITARM in your environment. export DEVKITARM=<path to>devkitARM")
endif

TOPDIR ?= $(CURDIR)
include $(DEVKITARM)/3ds_rules

#---------------------------------------------------------------------------------
# TARGET is the name of the output
# BUILD is the directory where object files & intermediate files will be placed
# SOURCES is a list of directories containing source code
# DATA is a list of directories containing data files
# INCLUDES is a list of directories containing header files
# GRAPHICS is a list of directories containing graphics files
# GFXBUILD is the directory where converted graphics files will be placed
#   If set to $(BUILD), it will statically link in the converted
#   files as if they were data files.
#
# ROMFS is the directory which contains the RomFS, relative to the Makefile (Optional)
# APP_TITLE is the name of the app stored in the SMDH file (Optional)
# APP_DESCRIPTION is the description of the app stored in the SMDH file (Optional)
# APP_AUTHOR is the author of the app stored in the SMDH file (Optional)
#---------------------------------------------------------------------------------

TARGET      := dosbox-3ds
BUILD       := build
SOURCES     := src src/cpu src/dos src/fpu src/hardware src/hardware/mame \
               src/hardware/serialport src/ints src/libs src/misc src/gui \
               src/shell src/platform/ctr src/libs/sdl_net
DATA        := src/platform/ctr/include ctr/gfx ctr/gfx/kbd
INCLUDES    := include src/platform/ctr src/libs/sdl_net
GRAPHICS    := gfx
GFXBUILD    := $(BUILD)
#ROMFS       := ctr/romfs
#GFXBUILD    := $(ROMFS)/gfx

APP_TITLE           := DOSBox
APP_DESCRIPTION     := DOSBox port for 3DS
APP_AUTHOR          := MrHuu

APP_PRODUCT_CODE    := CTR-P-DOSBOX
APP_UNIQUE_ID       := 0xD0486
APP_VERSION_MAJOR   := 0
APP_VERSION_MINOR   := 0
APP_VERSION_MICRO   := 4

APP_RSF             := $(TOPDIR)/ctr/template.rsf
APP_ICON            := $(TOPDIR)/ctr/icon.png

APP_BANNER_IMAGE    := $(TOPDIR)/ctr/banner.png
APP_BANNER_AUDIO    := $(TOPDIR)/ctr/audio_silent.wav

FILTERLIST  := sdlmain.cpp

#---------------------------------------------------------------------------------
# options for code generation
#---------------------------------------------------------------------------------
ARCH        := -march=armv6k -mtune=mpcore -mfloat-abi=hard -mtp=soft

#Idea to use funroll-all-loops, param max, and fomit-frame-pointer
#Originally by vogons user 'Moe'. Post found by RetroGamer02.
CFLAGS      := -g -Wall -O3 -mword-relocations \
               -fomit-frame-pointer -ffunction-sections \
			   -funroll-all-loops --param max-unrolled-insns=60 \
               $(ARCH)

CFLAGS      += $(INCLUDE) -D__3DS__ -DCTR_GFXEND_THREADED

CXXFLAGS    := $(CFLAGS) -std=gnu++11 -fpermissive \
               -Wno-unused-parameter -Wno-strict-aliasing

ASFLAGS     := -g $(ARCH)
LDFLAGS      = -specs=3dsx.specs -g $(ARCH) -Wl,-Map,$(notdir $*.map)

LIBS        := -lSDL -lcitro3d -lctru -lm

#---------------------------------------------------------------------------------
# list of directories containing libraries, this must be the top level containing
# include and lib
#---------------------------------------------------------------------------------
LIBDIRS	:= $(CTRULIB) $(PORTLIBS)

#---------------------------------------------------------------------------------
# no real need to edit anything past this point unless you need to add additional
# rules for different file extensions
#---------------------------------------------------------------------------------
ifneq ($(BUILD),$(notdir $(CURDIR)))
#---------------------------------------------------------------------------------

export OUTPUT    := $(CURDIR)/$(TARGET)
export TOPDIR    := $(CURDIR)

export VPATH     := $(foreach dir,$(SOURCES),$(CURDIR)/$(dir))  \
                    $(foreach dir,$(GRAPHICS),$(CURDIR)/$(dir)) \
                    $(foreach dir,$(DATA),$(CURDIR)/$(dir))

export DEPSDIR   :=	$(CURDIR)/$(BUILD)

CFILES      := $(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.c)))
CPPFILES    := $(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.cpp)))
SFILES      := $(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.s)))
PICAFILES   := $(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.v.pica)))
SHLISTFILES := $(foreach dir,$(SOURCES),$(notdir $(wildcard $(dir)/*.shlist)))
PNGFILES    := $(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.png)))
BGRFILES    := $(foreach dir,$(DATA),$(notdir $(wildcard $(dir)/*.bgr)))

CPPFILES    := $(filter-out $(FILTERLIST), $(CPPFILES))
#---------------------------------------------------------------------------------
# use CXX for linking C++ projects, CC for standard C
#---------------------------------------------------------------------------------
ifeq ($(strip $(CPPFILES)),)
#---------------------------------------------------------------------------------
	export LD	:=	$(CC)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
	export LD	:=	$(CXX)
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

#---------------------------------------------------------------------------------
ifeq ($(GFXBUILD),$(BUILD))
#---------------------------------------------------------------------------------
export T3XFILES :=  $(GFXFILES:.t3s=.t3x)
#---------------------------------------------------------------------------------
else
#---------------------------------------------------------------------------------
export ROMFS_T3XFILES	:=	$(patsubst %.t3s, $(GFXBUILD)/%.t3x, $(GFXFILES))
export T3XHFILES		:=	$(patsubst %.t3s, $(BUILD)/%.h, $(GFXFILES))
#---------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------

export OFILES_SOURCES 	:=	$(CPPFILES:.cpp=.o) $(CFILES:.c=.o) $(SFILES:.s=.o)

export BINFILES		:= $(PNGFILES:.png=.bgr) $(BGRFILES)
export OFILES_BIN	:=	$(addsuffix .o,$(BINFILES)) \
			$(PICAFILES:.v.pica=.shbin.o) $(SHLISTFILES:.shlist=.shbin.o) \
			$(addsuffix .o,$(T3XFILES))

export OFILES := $(OFILES_BIN) $(OFILES_SOURCES)

export HFILES	:=	$(PICAFILES:.v.pica=_shbin.h) $(SHLISTFILES:.shlist=_shbin.h) \
			$(addsuffix .h,$(subst .,_,$(BINFILES))) \
			$(GFXFILES:.t3s=.h)

export INCLUDE	:=	$(foreach dir,$(INCLUDES),-I$(CURDIR)/$(dir)) \
			$(foreach dir,$(LIBDIRS),-I$(dir)/include) \
			$(foreach dir,$(PORTLIBS),-I$(dir)/include/SDL) \
			-I$(CURDIR)/$(BUILD)

export LIBPATHS	:=	$(foreach dir,$(LIBDIRS),-L$(dir)/lib)

export _3DSXFLAGS += --smdh=$(TARGET).smdh

ifneq ($(ROMFS),)
	export _3DSXFLAGS += --romfs=$(CURDIR)/$(ROMFS)
endif

.PHONY: all clean

#---------------------------------------------------------------------------------
all: $(BUILD) $(GFXBUILD) $(DEPSDIR) $(ROMFS_T3XFILES) $(T3XHFILES)
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.ctr

3dsx: $(BUILD) $(GFXBUILD) $(DEPSDIR) $(ROMFS_T3XFILES) $(T3XHFILES)
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.ctr $(OUTPUT).3dsx

cia: $(BUILD) $(GFXBUILD) $(DEPSDIR) $(ROMFS_T3XFILES) $(T3XHFILES)
	@$(MAKE) --no-print-directory -C $(BUILD) -f $(CURDIR)/Makefile.ctr $(OUTPUT).cia

$(BUILD):
	@mkdir -p $@

ifneq ($(GFXBUILD),$(BUILD))
$(GFXBUILD):
	@mkdir -p $@
endif

ifneq ($(DEPSDIR),$(BUILD))
$(DEPSDIR):
	@mkdir -p $@
endif

#---------------------------------------------------------------------------------
clean:
	@echo clean ...
	@rm -fr $(BUILD) $(TARGET).3dsx $(OUTPUT).smdh $(TARGET).cia $(TARGET).elf $(GFXBUILD)

3dslink: 3dsx
	@3dslink -r 10 -a 192.168.1.96 $(OUTPUT).3dsx

#---------------------------------------------------------------------------------
$(GFXBUILD)/%.t3x	$(BUILD)/%.h	:	%.t3s
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@tex3ds -i $< -H $(BUILD)/$*.h -d $(DEPSDIR)/$*.d -o $(GFXBUILD)/$*.t3x
#---------------------------------------------------------------------------------
else

COMMON_MAKEROM_PARAMS       := -rsf $(APP_RSF) -target t -exefslogo -elf $(OUTPUT).elf -icon $(BUILD)/$(TARGET).smdh \
			-banner $(TARGET).bnr -DAPP_TITLE="$(APP_TITLE)" -DAPP_PRODUCT_CODE="$(APP_PRODUCT_CODE)"       \
			-DAPP_UNIQUE_ID="$(APP_UNIQUE_ID)" -DAPP_SYSTEM_MODE="80MB" -DAPP_SYSTEM_MODE_EXT="124MB"       \
			-major "$(APP_VERSION_MAJOR)" -minor "$(APP_VERSION_MINOR)" -micro "$(APP_VERSION_MICRO)"

ifneq ($(APP_LOGO),)
	APP_LOGO_ID             := Homebrew
	COMMON_MAKEROM_PARAMS   += -DAPP_LOGO_ID="$(APP_LOGO_ID)" -logo $(APP_LOGO)
else
	APP_LOGO_ID             := Nintendo
	COMMON_MAKEROM_PARAMS   += -DAPP_LOGO_ID="$(APP_LOGO_ID)"
endif

ifneq ($(ROMFS),)
	APP_ROMFS               := $(TOPDIR)/$(ROMFS)
	COMMON_MAKEROM_PARAMS   += -DAPP_ROMFS="$(APP_ROMFS)"
	CXXFLAGS                += -DCTR_ROMFS
endif

ifeq ($(OS),Windows_NT)
	MAKEROM		= makerom.exe
	BANNERTOOL	= bannertool.exe
else
	MAKEROM      = makerom
	BANNERTOOL   = bannertool
endif

#---------------------------------------------------------------------------------
# main targets
#---------------------------------------------------------------------------------
.PHONY : all

all               : $(OUTPUT).3dsx $(OUTPUT).cia

$(OUTPUT).3dsx    : $(OUTPUT).elf $(TARGET).smdh

$(OFILES_SOURCES) : $(HFILES)

$(OUTPUT).elf     : $(OFILES)

$(OUTPUT).cia     : $(OUTPUT).elf $(TARGET).bnr $(TARGET).smdh
	@$(MAKEROM) -f cia -o $(OUTPUT).cia -DAPP_ENCRYPTED=false $(COMMON_MAKEROM_PARAMS)
	@echo "built ... $(TARGET).cia"

$(TARGET).bnr     : $(APP_BANNER_IMAGE) $(APP_BANNER_AUDIO)
	@$(BANNERTOOL) makebanner -i $(APP_BANNER_IMAGE) -a $(APP_BANNER_AUDIO) -o $(TARGET).bnr > /dev/null

#---------------------------------------------------------------------------------
# you need a rule like this for each extension you use as binary data
#---------------------------------------------------------------------------------
%.bin.o	%_bin.h :	%.bin
#---------------------------------------------------------------------------------
	@echo $(notdir $<)
	@$(bin2o)

#---------------------------------------------------------------------------------
.PRECIOUS	:	%.t3x %.shbin
#---------------------------------------------------------------------------------
%.t3x.o	%_t3x.h :	%.t3x
#---------------------------------------------------------------------------------
	$(SILENTMSG) $(notdir $<)
	$(bin2o)
#---------------------------------------------------------------------------------

%.bgr.o %_bgr.h : %.bgr
	$(SILENTMSG) $(notdir $<)
	$(bin2o)

.PRECIOUS : %.bgr
%.bgr: %.png
	$(SILENTMSG) $(notdir $<)
	@ffmpeg -v error -vcodec png -i $< -vcodec rawvideo -f rawvideo -vf "transpose=1" -pix_fmt rgb565 $@

#---------------------------------------------------------------------------------
%.shbin.o %_shbin.h : %.shbin
#---------------------------------------------------------------------------------
	$(SILENTMSG) $(notdir $<)
	$(bin2o)

-include $(DEPSDIR)/*.d

#---------------------------------------------------------------------------------------
endif
#---------------------------------------------------------------------------------------
